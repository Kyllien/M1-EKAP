BIC = which.min(res.sum$bic)
)
res.sum
#glmulti
library(rJava)
install.packages("rJava")
install.packages("glmulti")
#glmulti
library(rJava)
library(glmulti)
multi <- glmulti(BRENT ~STOCK+PROD+ACT_MOND+Baltic_dry_index+MSCI_index, data= data_diff[-c(173:184)],
level = 1, method = "h", crit = "aic", confsetsize = 2, plotty = F, report = F, fitfunction = "lm")
multi <- glmulti(BRENT ~STOCK+PROD+ACT_MOND+Baltic_dry_index+MSCI_index, data= data.frame(data_diff[-c(173:184)]),
level = 1, method = "h", crit = "aic", confsetsize = 2, plotty = F, report = F, fitfunction = "lm")
data.frame(data_diff[-c(173:184)])
multi <- glmulti(BRENT ~STOCK+PROD+ACT_MOND+Baltic_dry_index+MSCI_index, data= data.frame(data_diff[-c(173:184)],),
level = 1, method = "h", crit = "aic", confsetsize = 2, plotty = F, report = F, fitfunction = "lm")
data.frame(data_diff[-c(173:184),])
#glmulti
m <- data.frame(data_diff[-c(173:184),])
View(m)
summary(m)
str(m)
#glmulti
dataglmulti <- data.frame(data_diff[-c(173:184),])
multi <- glmulti(BRENT ~STOCK+PROD+ACT_MOND+Baltic_dry_index+MSCI_index, data= dataglmulti,
level = 1, method = "h", crit = "aic", confsetsize = 2, plotty = F, report = F, fitfunction = "lm")
summary(multi)
show(multi)
step1 <- stepAIC(model3, direction="both")
#MASS
library(MASS)
step1 <- stepAIC(model3, direction="both")
step2 <- stepAIC(model3, direction="forward")
step3 <- stepAIC(model3, direction="backward")
forecast(model3,12)
library(forecast)
forecast(model3,12)
step1 <- stepAIC(model3, direction="both")
step2 <- stepAIC(model3, direction="forward")
step3 <- stepAIC(model3, direction="backward")
#ARX
str(data_diff)
View(data_diff)
step1 <- stepAIC(model1, direction="both")
step2 <- stepAIC(model2, direction="both")
step3 <- stepAIC(model3, direction = "both")
step1 <- stepAIC(model1, direction="both")
install.packages("lgarch")
install.packages("gets")
#ARX
library(tidyverse)
library(lgarch)
library(gets)
View(data_diff)
class(data_diff[,2:6])
test <- data_diff[-c(173:184),]
training <- data_diff[-c(173:184),]
class(training[,2:6])
mX = data.matrix(training[,2:6])
modelArX <- arx(training$BRENT, mc = T, ar = 1, mxreg = mX[, 1:6], vcov.type = "white")
modelArX <- arx(training$BRENT, mc = T, ar = 1, mxreg = mX[, 1:5], vcov.type = "white")
modelArX <- arx(training$BRENT, mc = T, ar = 1, mxreg = mX[, 1:5], vcov.type = "white")
modelArX <- arx(training$BRENT, mc = F, ar = 1, mxreg = mX[, 1:5], vcov.type = "white")
modelArX <- arx(training$BRENT, mc = T, ar = 1, mxreg = mX[, 1:5], vcov.type = "ordinary")
mX
training <- data.frame(data_diff[-c(173:184),])
class(training[,2:6])
mX = data.matrix(training[,2:6])
modelArX <- arx(training$BRENT, mc = T, ar = 1, mxreg = mX[, 1:5], vcov.type = "ordinary")
modelArX <- arx(training$BRENT, mc = T, ar = 1, mxreg = mX[, 1:5], vcov.type = "white")
getsm <- getsm(Model01)
getsm <- getsm(ModelArX)
getsm <- getsm(modelArX)
getsm
# Gets betas
coef.arx(getsm)
# Get the name of relevant variables
names <- names(coef.arx(getsm))
names
names <- names_mX[-1] # remove the AR(1) coef.
names <- names[-1] # remove the AR(1) coef.
names
getsm <- getsm(modelArX)
getsm
# Gets betas
coef.arx(getsm)
#Meilleuir modele avec seulement MSCI et Act mondiale
modelArX <- arx(training$BRENT, mc = T, ar = 1, mxreg = mX[, c(2,3)], vcov.type = "white")
getsm <- getsm(modelArX)
getsm
#Meilleuir modele avec seulement MSCI et Act mondiale
modelArX <- arx(training$BRENT, mc = T, ar = 1, mxreg = mX[, c(3,4)], vcov.type = "white")
getsm <- getsm(modelArX)
getsm
#Meilleuir modele avec seulement MSCI et Act mondiale
modelArX <- arx(training$BRENT, mc = F, ar = 1, mxreg = mX[, c(3,4)], vcov.type = "white")
getsm <- getsm(modelArX)
getsm
#Meilleuir modele avec seulement MSCI et sans la constante
modelArX <- arx(training$BRENT, mc = F, ar = 1, mxreg = mX[, c(4)], vcov.type = "white")
getsm <- getsm(modelArX)
getsm
#Prevision du modele lineaire avec act monde et msci
forecast(model3,1)
#Prevision du modele lineaire avec act monde et msci
forecast(model3)
#Prevision du modele lineaire avec act monde et msci
summary(model3)
#Meilleuir modele avec seulement MSCI et sans la constante
modelArX <- arx(training$BRENT, mc = F, ar = 1, mxreg = mX[, c(4)], vcov.type = "white")
getsm <- getsm(modelArX)
getsm
#Prevision du modele lineaire avec act monde et msci
summary(model3)
View(data_diff)
View(data_diff)
View(data_diff$ACT_MOND)
View(data_diff$MSCI_index)
prevLM <- data.frame()
prevLM <- data.frame(1:12)
View(prevLM)
prevLM <- data.frame(Valeur=1:12)
#Prevision du modele lineaire avec act monde et msci faite à la main à laide des coefficients calcule par le model de regression
summary(model3)
prevLM <- data.frame(Valeur=1:12)
for (i in 1:12){
prevLM[i] <- (-0.0013247) + (data_diff$ACT_MOND[172 + i]*0.0006551) + (data_diff$MSCI_index[172+i]*0.7696694) + 0.004694
}
View(prevLM)
for (i in 1:12){
prevLM[i,] <- (-0.0013247) + (data_diff$ACT_MOND[172 + i]*0.0006551) + (data_diff$MSCI_index[172+i]*0.7696694) + 0.004694
}
View(prevLM)
View(prevLM)
getsm
modelArX <- arx(training$BRENT, mc = T, ar = 1, mxreg = mX[, 1:5], vcov.type = "white")
getsm <- getsm(modelArX)
getsm
#Meilleuir modele avec seulement MSCI et sans la constante
modelArX <- arx(training$BRENT, mc = F, ar = 1, mxreg = mX[, c(4)], vcov.type = "white")
getsm <- getsm(modelArX)
getsm
summary(modelArX)
#Prevision avec Arx
prevARx <- NULL
for (i in 1:12) {
mX <- data.matrix(data.frame(data_diff[1:(171+i),5]))
y <- data.matrix(data.frame(data_diff[1:(171+i),1]))
ARX <- arx(y, mc = F, ar = 1, mxreg = mX, vcov.type = "white")
prevARx <- c(prevARx, predict(ARX, n.ahead = 1, newmxreg = data.matrix(X[227+i,])))
}
#Prevision avec Arx
prevARx <- NULL
for (i in 1:12) {
mX <- data.matrix(data.frame(data_diff[1:(171+i),5]))
y <- data.matrix(data.frame(data_diff[1:(171+i),1]))
ARX <- arx(y, mc = F, ar = 1, mxreg = mX, vcov.type = "white")
prevARx <- c(prevARx, predict(ARX, n.ahead = 1, newmxreg = data.matrix(data.frame(data_diff[1:(172+i),5]))))
}
for (i in 1:12) {
mX <- data.matrix(data.frame(data_diff[1:(171+i),5]))
y <- data.matrix(data.frame(data_diff[1:(171+i),1]))
ARX <- arx(y, mc = F, ar = 1, mxreg = mX, vcov.type = "white")
prevARx <- c(prevARx, predict(ARX, n.ahead = 1, newmxreg = data.matrix(data.frame(data_diff[1:(171+i),5]))))
}
for (i in 1:12) {
mX <- data.matrix(data.frame(data_diff[1:(171+i),5]))
y <- data.matrix(data.frame(data_diff[1:(171+i),1]))
ARX <- arx(y, mc = F, ar = 1, mxreg = mX, vcov.type = "white")
prevARx <- c(prevARx, predict(ARX, n.ahead = 1, newmxreg = data.matrix(data.frame(data_diff[(172+i),5]))))
}
prevARx
#Prevision avec Arx
prevARx <- NULL
for (i in 1:12) {
mX <- data.matrix(data.frame(data_diff[1:(171+i),5]))
y <- data.matrix(data.frame(data_diff[1:(171+i),1]))
ARX <- arx(y, mc = F, ar = 1, mxreg = mX, vcov.type = "white")
prevARx <- c(prevARx, predict(ARX, n.ahead = 1, newmxreg = data.matrix(data.frame(data_diff[(172+i),5]))))
}
prevARx
View(data_diff)
mX <- data.matrix(data.frame(data_diff[1:(171),5]))
y <- data.matrix(data.frame(data_diff[1:(171),1]))
#Prevision avec Arx
prevARx <- NULL
for (i in 1:12) {
mX <- data.matrix(data.frame(data_diff[1:(171+i),5]))
y <- data.matrix(data_diff[1:(171+i),1])
ARX <- arx(y, mc = F, ar = 1, mxreg = mX, vcov.type = "white")
prevARx <- c(prevARx, predict(ARX, n.ahead = 1, newmxreg = data.matrix(data.frame(data_diff[(172+i),5]))))
}
prevARx
Y <- data_diff[,1]
View(Y)
X <- data.frame(data_diff[,5])
View(X)
prevARx <- NULL
for (i in 1:12) {
mX <- data.matrix(X[1:(172+i),])
y <- data.matrix(Y[1:(172+i)])
ARX <- arx(y, mc = T, ar = 1, mxreg = mX, vcov.type = "ordinary")
prevARx <- c(forecast, predict(ARX, n.ahead = 1, newmxreg = data.matrix(X[173+i,])))
}
prevARx
prevARx <- NULL
for (i in 1:12) {
mX <- data.matrix(X[1:(171+i),])
y <- data.matrix(Y[1:(171+i)])
ARX <- arx(y, mc = T, ar = 1, mxreg = mX, vcov.type = "ordinary")
prevARx <- c(forecast, predict(ARX, n.ahead = 1, newmxreg = data.matrix(X[172+i,])))
}
prevARx
for (i in 1:12) {
mX <- data.matrix(X[1:(171+i),])
y <- data.matrix(Y[1:(171+i)])
ARX <- arx(y, mc = T, ar = 1, mxreg = mX, vcov.type = "white")
prevARx <- c(forecast, predict(ARX, n.ahead = 1, newmxreg = data.matrix(X[172+i,])))
}
prevARx
View(prevARx)
prevARx <- data.frame(Valeur=1:12)
for (i in 1:12) {
mX <- data.matrix(X[1:(171+i),])
y <- data.matrix(Y[1:(171+i)])
ARX <- arx(y, mc = T, ar = 1, mxreg = mX, vcov.type = "white")
prevARx[i] <- c(forecast, predict(ARX, n.ahead = 1, newmxreg = data.matrix(X[172+i,])))
}
for (i in 1:12) {
mX <- data.matrix(X[1:(171+i),])
y <- data.matrix(Y[1:(171+i)])
ARX <- arx(y, mc = T, ar = 1, mxreg = mX, vcov.type = "white")
prevARx <- c(prevARx, predict(ARX, n.ahead = 1, newmxreg = data.matrix(X[172+i,])))
}
prevARx
View(prevARx)
prevARx <- data.frame(Valeur=1:13)
prevARx <- data.frame(Valeur=1:12)
for (i in 1:12) {
mX <- data.matrix(X[1:(171+i),])
y <- data.matrix(Y[1:(171+i)])
ARX <- arx(y, mc = T, ar = 1, mxreg = mX, vcov.type = "white")
prevARx[i] <- predict(ARX, n.ahead = 1, newmxreg = data.matrix(X[172+i,]))
}
prevARx
predict(ARX, n.ahead = 1, newmxreg = data.matrix(X[172+i,]))
prevARx <- data.frame(Valeur=1:12)
for (i in 1:12) {
mX <- data.matrix(X[1:(171+i),])
y <- data.matrix(Y[1:(171+i)])
ARX <- arx(y, mc = T, ar = 1, mxreg = mX, vcov.type = "white")
prevARx[i,] <- predict(ARX, n.ahead = 1, newmxreg = data.matrix(X[172+i,]))
}
prevARx
View(prevARx)
prevARx <- data.frame(Date=1:12,Valeur=1:12)
for (i in 1:12) {
mX <- data.matrix(X[1:(171+i),])
y <- data.matrix(Y[1:(171+i)])
ARX <- arx(y, mc = T, ar = 1, mxreg = mX, vcov.type = "white")
prevARx[i,2] <- predict(ARX, n.ahead = 1, newmxreg = data.matrix(X[172+i,]))
}
prevARx <- prevARx
prevARx
prevARx <- data.frame(Date=1:12,Valeur=1:12,Ticker = "ARx")
for (i in 1:12) {
mX <- data.matrix(X[1:(171+i),])
y <- data.matrix(Y[1:(171+i)])
ARX <- arx(y, mc = T, ar = 1, mxreg = mX, vcov.type = "white")
prevARx[i,2] <- predict(ARX, n.ahead = 1, newmxreg = data.matrix(X[172+i,]))
}
prevARx
prevLM <- data.frame(Date=1:12,Valeur=1:12,Ticker="LM")
for (i in 1:12){
prevLM[i,2] <- (-0.0013247) + (data_diff$ACT_MOND[172 + i]*0.0006551) + (data_diff$MSCI_index[172+i]*0.7696694) + 0.004694
}
View(prevLM)
#Graphique
prevAR1 <- data.frame(Valeur=AR1)
View(prevAR1)
#Graphique
prevAR1 <- data.frame(Valeur=AR1[c(173:184]),)
#Graphique
prevAR1 <- data.frame(Valeur=AR1[c(173:184),)])
#Graphique
prevAR1 <- data.frame(Valeur=AR1[c(173:184),])
View(prevAR1)
#Graphique
prevAR1 <- data.frame(Date=1:12,Valeur=AR1[c(173:184),],Ticker="AR1")
prevARp <- data.frame(Date=1:12,Valeur=ARp[c(173:184),],Ticker="ARp")
prevARIMA <- data.frame(Date=1:12,Valeur=ARIMAp[c(173:184),],Ticker="ARIMA")
prevHW <- data.frame(Date=1:12,Valeur=HW[c(173:184),],Ticker="HW")
valeurR <- data.frame(Date=1:12,Valeur=data_diff[c(173:184),1],Ticker="ValeurR")
graphPrev <- rbind(prevAR1,prevARp,prevARIMA,prevARx,prevHW,prevLM,valeurR)
prevARx
prevLM
#Graphique
prevAR1 <- data.frame(Date=1:12,Valeur=AR1[c(173:184),],Ticker="AR1")
prevARp <- data.frame(Date=1:12,Valeur=ARp[c(173:184),],Ticker="ARp")
prevARIMA <- data.frame(Date=1:12,Valeur=ARIMAp[c(173:184),],Ticker="ARIMA")
prevHW <- data.frame(Date=1:12,Valeur=HW[c(173:184),],Ticker="HW")
valeurR <- data.frame(Date=1:12,Valeur=data_diff[c(173:184),1],Ticker="ValeurR")
graphPrev <- rbind(prevAR1,prevARp,prevARIMA,prevARx,prevHW,prevLM,valeurR)
View(prevAR1)
View(prevARIMA)
View(prevARp)
View(prevARp)
View(prevARx)
View(prevHW)
View(prevHW)
View(prevLM)
graphPrev <- rbind(prevAR1,prevARp)
graphPrev <- rbind(prevAR1,prevARp,prevARIMA)
prevHW
graphPrev <- rbind(prevAR1,prevARp,prevARIMA,prevHW)
graphPrev <- rbind(prevAR1,prevARp,prevARIMA,prevHW,valeurR)
valeurR
valeurR <- data.frame(Date=1:12,Valeur=as.numeric(data_diff[c(173:184),1]),Ticker="ValeurR")
valeurR
graphPrev <- rbind(prevAR1,prevARp,prevARIMA,prevHW,prevARx,prevLM,valeurR)
library(ggplot2)
ggplot(data=graphPrev, aes( x=Date,y=Valeur, color=Ticker, shape=Ticker)) +
geom_line(cex=0.01) +
theme_bw() + ggtitle("Graphique des différentes prévisions, comparé à la valeur réelle") +
xlab("Temps") + ylab("Rendement")
#Erreur de prevision
#Prevision naive
naive <- rwf(data_diff[1:172,1],h=12)
plot(naive)
View(test)
#MSE
mse <- function(err){mean(err*err)}
erreur1 <- valeurR[,2] - prevAR1[,2]
AR1MSE <- mse(erreur1)
AR1MSE
erreur1 <- valeurR[,2] - prevARp[,2]
ARpMSE <- mse(erreur1)
ARpMSE
erreur1 <- valeurR[,2] - prevARIMA[,2]
ARIMAMSE <- mse(erreur1)
ARIMAMSE
erreur1 <- valeurR[,2] - prevHW[,2]
HWMSE <- mse(erreur1)
HWMSE
erreur1 <- valeurR[,2] - prevARx[,2]
ARxMSE <- mse(erreur1)
ARxMSE
erreur1 <- valeurR[,2] - prevLM[,2]
LmMSE <- mse(erreur1)
LmMSE
erreur1 <- valeurR[,2] - naive$mean
naiveMSE <- mse(erreur1)
naiveMSE
MSE <- cbind(AR1MSE,ARpMSE,ARIMAMSE,HWMSE,ARxMSE,LmMSE,naiveMSE)
MSE
#LED Holtwinters
modelHW <- HoltWinters(data_diff$BRENT, gamma=FALSE)
modelHW
#Test de precision : dm test
dm.test(residuals(out1),residuals(naive),h=12, alternative = "l")
View(out1)
naive
#Test de precision : dm test
dm.test(out1$residuals,residuals(naive),h=12, alternative = "l")
test <- ts(data=data_diff$BRENT[-c(173:184),],start=c(2004,09), frequency=12)
#AR1
library(forecast)
AR1 <- test
for (i in 1:12){
modelAR1 <- arima(AR1,order=c(1,0,0))
prev <- forecast(model,1)
p <- rbind(data.frame(Valeur=as.numeric(AR1)),data.frame(Valeur=as.numeric(prev$mean)))
AR1 <- ts(p, start=c(2004,09),frequency=12)
}
#ARp
ARp <- test
for (i in 1:12){
modelARp <- ar(ARp,AIC=TRUE)
prev <- forecast(model,1)
p <- rbind(data.frame(Valeur=as.numeric(ARp)),data.frame(Valeur=as.numeric(prev$mean)))
ARp <- ts(p, start=c(2004,09),frequency=12)
}
#ARIMA(p,d,q)
ARIMAp <- test
for (i in 1:12){
modelARIMA <- auto.arima(ARIMAp)
prev <- forecast(model,1)
p <- rbind(data.frame(Valeur=as.numeric(ARIMAp)),data.frame(Valeur=as.numeric(prev$mean)))
ARIMAp <- ts(p, start=c(2004,09),frequency=12)
}
#Holt-Winters
HW <- test
for (i in 1:12){
modelHW <- HoltWinters(HW,gamma =FALSE)
prev <- forecast(model,1)
p <- rbind(data.frame(Valeur=as.numeric(HW)),data.frame(Valeur=as.numeric(prev$mean)))
HW <- ts(p, start=c(2004,09),frequency=12)
}
Y <- data_diff[,1]
X <- data.frame(data_diff[,5])
prevARx <- data.frame(Date=1:12,Valeur=1:12,Ticker = "ARx")
for (i in 1:12) {
mX <- data.matrix(X[1:(171+i),])
y <- data.matrix(Y[1:(171+i)])
modelARX <- arx(y, mc = T, ar = 1, mxreg = mX, vcov.type = "white")
prevARx[i,2] <- predict(ARX, n.ahead = 1, newmxreg = data.matrix(X[172+i,]))
}
View(X)
#Test de precision : dm test
dm.test(residuals(modelAR1),residuals(naive),h=12, alternative = "l")
residuals(naive)
residuals(modelAR1)
#Test de precision : dm test
data.frame(residuals(modelAR1))
residuals(naive)
dm.test(residuals(modelAR1),residuals(modelArX),h=12, alternative = "l")
dm.test(residuals(modelAR1),residuals(modelArp),h=12, alternative = "l")
dm.test(residuals(modelAR1),residuals(modelARp),h=12, alternative = "l")
dm.test(residuals(modelAR1),residuals(modelARIMA),h=12, alternative = "l")
dm.test(residuals(modelAR1),residuals(modelHW),h=12, alternative = "l")
dm.test(residuals(modelAR1),residuals(modelLM),h=12, alternative = "l")
dm.test(residuals(modelAR1),residuals(model3),h=12, alternative = "l")
dm.test(residuals(naive),residuals(model3),h=12, alternative = "l")
dm.test(residuals(naive),residuals(modelARX),h=12, alternative = "l")
residuals(modelARX
m
residuals(modelARX)
dm.test(residuals(naive),residuals(modelHW),h=12, alternative = "l")
residuals(modelHW)
residuals(naive)
residuals(modelHW
residuals(modelHW)
residuals(modelHW)
resHW <- residuals(modelHW)[1]
resHW
resHW <- residuals(modelHW)[c(1:173)]
resHW
resHW <- residuals(modelHW)[c(1:172)]
resNaive <- residuals(naive)
residuals(modelArX)
resNaive <- residuals(naive)
resNaive
resArP <- residuals(modelARp)
resArP
resArP <- residuals(modelARp)[c(1:172)]
resArP
resAr1 <- residuals(modelARIMA)
resAr1
resAr1 <- residuals(modelARIMA)[c(1:172)]
resArima <- residuals(modelARIMA)[c(1:172)]
resArima
resHW <- residuals(modelHW)
resHW
resHW <- residuals(modelHW)[c(1:172)]
resHW
dm.test(resAr1,resNaive,h=12, alternative = "l")
dm.test(resArP,resNaive,h=12, alternative = "l")
dm.test(resArima,resNaive,h=12, alternative = "l")
dm.test(resHW,resNaive,h=12, alternative = "l")
dm.test(resAr1,resNaive,h=12, alternative = "l")
dm.test(resArP,resNaive,h=12, alternative = "l")
dm.test(resArima,resNaive,h=12, alternative = "l")
resLM <- residuals(model3)[c(1:172)]
resLM
dm.test(resLM,resNaive,h=12, alternative = "l")
dm.test(resArX,resNaive,h=12, alternative = "l")
resArX <- residuals(modelArX)
dm.test(resArX,resNaive,h=12, alternative = "l")
#AR1
dm.test(resArP,resAr1,h=12, alternative = "l")
dm.test(resArima,resAr1,h=12, alternative = "l")
dm.test(resArima,resAr1,h=12, alternative = "l")
dm.test(resArima,resAr1,h=1, alternative = "l")
dm.test(resArima,resAr1,h=12, alternative = "l")
dm.test(resHW,resAr1,h=12, alternative = "l")
dm.test(resLM,resAr1,h=12, alternative = "l")
dm.test(resArX,resAr1,h=12, alternative = "l")
dm.test(resAr1,resAr1,h=12, alternative = "l")
dm.test(resHW,resAr1,h=12, alternative = "l")
dm.test(resLM,resAr1,h=12, alternative = "l")
dm.test(resArX,resAr1,h=12, alternative = "l")
#ArP
dm.test(resAr1,resArP,h=12, alternative = "l")
dm.test(resArima,resArP,h=12, alternative = "l")
dm.test(resHW,resArP,h=12, alternative = "l")
dm.test(resLM,resArP,h=12, alternative = "l")
dm.test(resArX,resArP,h=12, alternative = "l")
#Arima
dm.test(resAr1,resArima,h=12, alternative = "l")
dm.test(resArP,resArima,h=12, alternative = "l")
dm.test(resHW,resArima,h=12, alternative = "l")
dm.test(resLM,resArima,h=12, alternative = "l")
dm.test(resArX,resArima,h=12, alternative = "l")
#HW
dm.test(resAr1,resHW,h=12, alternative = "l")
dm.test(resArP,resHW,h=12, alternative = "l")
dm.test(resArima,resHW,h=12, alternative = "l")
dm.test(resLM,resHW,h=12, alternative = "l")
dm.test(resArX,resHW,h=12, alternative = "l")
#LM
dm.test(resAr1,resLM,h=12, alternative = "l")
dm.test(resArP,resLM,h=12, alternative = "l")
dm.test(resArima,resLM,h=12, alternative = "l")
dm.test(resHW,resLM,h=12, alternative = "l")
dm.test(resArX,resLM,h=12, alternative = "l")
#ArX
dm.test(resAr1,resArX,h=12, alternative = "l")
dm.test(resArP,resArX,h=12, alternative = "l")
dm.test(resArima,resArX,h=12, alternative = "l")
dm.test(resHW,resArX,h=12, alternative = "l")
dm.test(resLM,resArX,h=12, alternative = "l")
