return(s)
}
P<-Portefeuille(data3,Matrendement,Matrendement[,6],Rf)
str(P)
#Fonction qui calcul différents type de portefeuille et le frontiere d efficience
Portefeuille <- function(BDD,Mat,benchmark,rf){
PEquiP <- PortefeuilleEqui(BDD,Mat,benchmark,rf)
PortefeuilleAlea(Mat)
EfficientFrontier(Mat)
# Portefeuille de variance minimum
assetSymbols <- c(str_c(1:ncol(Mat)))
assetReturns <- data.frame(Mat)
mu <- colMeans(assetReturns) # rendements espÃ©rÃ©s
cov.mat <- cov(assetReturns) # matrices de covariances
PortefeuilleMinV <-  PortefeuilleVarMin(mu,cov.mat,assetSymbols)
#Plot rendement et volatilité
liste<-rbind(BDD[,c(3,5)],PEquiP,fill=T)
liste<-drop_na(liste)
tab <- liste[, .(er = round(mean(ret), 4),
sd = round(sd(ret), 4)),
by = "ticker"]
s<-as.data.table(cbind("PortefeuilleVarMin",PortefeuilleMinV[2],PortefeuilleMinV[3]))
names(s)=c("ticker","er","sd")
# tab<-rbind(tab,s)
print(ggplot(tab, aes(x = sd, y = er, color = ticker)) +
geom_point(size = 5) +
# Miscellaneous Formatting
theme_bw() + ggtitle("Risk-Return Tradeoff") +
xlab("Volatility") + ylab("Expected Returns") +
scale_y_continuous(label = percent, limits = c(0, 0.001)) +
scale_x_continuous(label = percent, limits = c(0, 0.04)))
return(tab)
}
P<-Portefeuille(data3,Matrendement,Matrendement[,6],Rf)
str(P)
#Fonction qui calcul différents type de portefeuille et le frontiere d efficience
Portefeuille <- function(BDD,Mat,benchmark,rf){
PEquiP <- PortefeuilleEqui(BDD,Mat,benchmark,rf)
PortefeuilleAlea(Mat)
EfficientFrontier(Mat)
# Portefeuille de variance minimum
assetSymbols <- c(str_c(1:ncol(Mat)))
assetReturns <- data.frame(Mat)
mu <- colMeans(assetReturns) # rendements espÃ©rÃ©s
cov.mat <- cov(assetReturns) # matrices de covariances
PortefeuilleMinV <-  PortefeuilleVarMin(mu,cov.mat,assetSymbols)
#Plot rendement et volatilité
liste<-rbind(BDD[,c(3,5)],PEquiP,fill=T)
liste<-drop_na(liste)
tab <- liste[, .(er = round(mean(ret), 4),
sd = round(sd(ret), 4)),
by = "ticker"]
s<-as.data.table(cbind("PortefeuilleVarMin",PortefeuilleMinV[2],PortefeuilleMinV[3]))
names(s)=c("ticker","er","sd")
tab <- rbind(tab,s)
#print(ggplot(tab, aes(x = sd, y = er, color = ticker)) +
geom_point(size = 5) +
# Miscellaneous Formatting
theme_bw() + ggtitle("Risk-Return Tradeoff") +
xlab("Volatility") + ylab("Expected Returns") +
scale_y_continuous(label = percent, limits = c(0, 0.001)) +
scale_x_continuous(label = percent, limits = c(0, 0.04)))
return(tab)
}
#Fonction qui calcul différents type de portefeuille et le frontiere d efficience
Portefeuille <- function(BDD,Mat,benchmark,rf){
PEquiP <- PortefeuilleEqui(BDD,Mat,benchmark,rf)
PortefeuilleAlea(Mat)
EfficientFrontier(Mat)
# Portefeuille de variance minimum
assetSymbols <- c(str_c(1:ncol(Mat)))
assetReturns <- data.frame(Mat)
mu <- colMeans(assetReturns) # rendements espÃ©rÃ©s
cov.mat <- cov(assetReturns) # matrices de covariances
PortefeuilleMinV <-  PortefeuilleVarMin(mu,cov.mat,assetSymbols)
#Plot rendement et volatilité
liste<-rbind(BDD[,c(3,5)],PEquiP,fill=T)
liste<-drop_na(liste)
tab <- liste[, .(er = round(mean(ret), 4),
sd = round(sd(ret), 4)),
by = "ticker"]
s<-as.data.table(cbind("PortefeuilleVarMin",PortefeuilleMinV[2],PortefeuilleMinV[3]))
names(s)=c("ticker","er","sd")
tab <- rbind(tab,s)
# print(ggplot(tab, aes(x = sd, y = er, color = ticker)) +
#         geom_point(size = 5) +
#         # Miscellaneous Formatting
#         theme_bw() + ggtitle("Risk-Return Tradeoff") +
#         xlab("Volatility") + ylab("Expected Returns") +
#         scale_y_continuous(label = percent, limits = c(0, 0.001)) +
#         scale_x_continuous(label = percent, limits = c(0, 0.04)))
return(tab)
}
P<-Portefeuille(data3,Matrendement,Matrendement[,6],Rf)
str(P)
View(P)
#Fonction qui calcul différents type de portefeuille et le frontiere d efficience
Portefeuille <- function(BDD,Mat,benchmark,rf){
PEquiP <- PortefeuilleEqui(BDD,Mat,benchmark,rf)
PortefeuilleAlea(Mat)
EfficientFrontier(Mat)
# Portefeuille de variance minimum
assetSymbols <- c(str_c(1:ncol(Mat)))
assetReturns <- data.frame(Mat)
mu <- colMeans(assetReturns) # rendements espÃ©rÃ©s
cov.mat <- cov(assetReturns) # matrices de covariances
PortefeuilleMinV <-  PortefeuilleVarMin(mu,cov.mat,assetSymbols)
#Plot rendement et volatilité
liste<-rbind(BDD[,c(3,5)],PEquiP,fill=T)
liste<-drop_na(liste)
tab <- liste[, .(er = round(mean(ret), 4),
sd = round(sd(ret), 4)),
by = "ticker"]
s<-as.data.table(cbind("PortefeuilleVarMin",PortefeuilleMinV[2],PortefeuilleMinV[3]))
names(s)=c("ticker","er","sd")
tab <- rbind(tab,s)
print(ggplot(tab, aes(x = sd, y = er, color = ticker)) +
geom_point(size = 5) +
# Miscellaneous Formatting
theme_bw() + ggtitle("Risk-Return Tradeoff") +
xlab("Volatility") + ylab("Expected Returns") +
scale_y_continuous(label = percent, limits = c(0, 0.001)) +
scale_x_continuous(label = percent, limits = c(0, 0.04)))
return(tab)
}
P<-Portefeuille(data3,Matrendement,Matrendement[,6],Rf)
#Fonction qui calcul différents type de portefeuille et le frontiere d efficience
Portefeuille <- function(BDD,Mat,benchmark,rf){
PEquiP <- PortefeuilleEqui(BDD,Mat,benchmark,rf)
PortefeuilleAlea(Mat)
EfficientFrontier(Mat)
# Portefeuille de variance minimum
assetSymbols <- c(str_c(1:ncol(Mat)))
assetReturns <- data.frame(Mat)
mu <- colMeans(assetReturns) # rendements espÃ©rÃ©s
cov.mat <- cov(assetReturns) # matrices de covariances
PortefeuilleMinV <-  PortefeuilleVarMin(mu,cov.mat,assetSymbols)
#Plot rendement et volatilité
liste<-rbind(BDD[,c(3,5)],PEquiP,fill=T)
liste<-drop_na(liste)
tab <- liste[, .(er = round(mean(ret), 4),
sd = round(sd(ret), 4)),
by = "ticker"]
s<-as.data.table(cbind("PortefeuilleVarMin",PortefeuilleMinV[2],PortefeuilleMinV[3]))
names(s)=c("ticker","er","sd")
tab <- data.table(rbind(tab,s))
print(ggplot(tab, aes(x = sd, y = er, color = ticker)) +
geom_point(size = 5) +
# Miscellaneous Formatting
theme_bw() + ggtitle("Risk-Return Tradeoff") +
xlab("Volatility") + ylab("Expected Returns") +
scale_y_continuous(label = percent, limits = c(0, 0.001)) +
scale_x_continuous(label = percent, limits = c(0, 0.04)))
return(tab)
}
P<-Portefeuille(data3,Matrendement,Matrendement[,6],Rf)
#Fonction qui calcul différents type de portefeuille et le frontiere d efficience
Portefeuille <- function(BDD,Mat,benchmark,rf){
PEquiP <- PortefeuilleEqui(BDD,Mat,benchmark,rf)
PortefeuilleAlea(Mat)
EfficientFrontier(Mat)
# Portefeuille de variance minimum
assetSymbols <- c(str_c(1:ncol(Mat)))
assetReturns <- data.frame(Mat)
mu <- colMeans(assetReturns) # rendements espÃ©rÃ©s
cov.mat <- cov(assetReturns) # matrices de covariances
PortefeuilleMinV <-  PortefeuilleVarMin(mu,cov.mat,assetSymbols)
#Plot rendement et volatilité
liste<-rbind(BDD[,c(3,5)],PEquiP,fill=T)
liste<-drop_na(liste)
tab <- liste[, .(er = round(mean(ret), 4),
sd = round(sd(ret), 4)),
by = "ticker"]
s<-as.data.table(cbind("PortefeuilleVarMin",PortefeuilleMinV[2],PortefeuilleMinV[3]))
names(s)=c("ticker","er","sd")
tab <- data.table(rbind(tab,s))
# print(ggplot(tab, aes(x = sd, y = er, color = ticker)) +
#         geom_point(size = 5) +
#         # Miscellaneous Formatting
#         theme_bw() + ggtitle("Risk-Return Tradeoff") +
#         xlab("Volatility") + ylab("Expected Returns") +
#         scale_y_continuous(label = percent, limits = c(0, 0.001)) +
#         scale_x_continuous(label = percent, limits = c(0, 0.04)))
return(tab)
}
P<-Portefeuille(data3,Matrendement,Matrendement[,6],Rf)
#Fonction qui calcul différents type de portefeuille et le frontiere d efficience
Portefeuille <- function(BDD,Mat,benchmark,rf){
PEquiP <- PortefeuilleEqui(BDD,Mat,benchmark,rf)
PortefeuilleAlea(Mat)
EfficientFrontier(Mat)
# Portefeuille de variance minimum
assetSymbols <- c(str_c(1:ncol(Mat)))
assetReturns <- data.frame(Mat)
mu <- colMeans(assetReturns) # rendements espÃ©rÃ©s
cov.mat <- cov(assetReturns) # matrices de covariances
PortefeuilleMinV <-  PortefeuilleVarMin(mu,cov.mat,assetSymbols)
#Plot rendement et volatilité
liste<-rbind(BDD[,c(3,5)],PEquiP,fill=T)
liste<-drop_na(liste)
tab <- liste[, .(er = round(mean(ret), 4),
sd = round(sd(ret), 4)),
by = "ticker"]
s<-as.data.table(cbind("PortefeuilleVarMin",PortefeuilleMinV[2],PortefeuilleMinV[3]))
names(s)=c("ticker","er","sd")
# tab <- data.table(rbind(tab,s))
print(ggplot(tab, aes(x = sd, y = er, color = ticker)) +
geom_point(size = 5) +
# Miscellaneous Formatting
theme_bw() + ggtitle("Risk-Return Tradeoff") +
xlab("Volatility") + ylab("Expected Returns") +
scale_y_continuous(label = percent, limits = c(0, 0.001)) +
scale_x_continuous(label = percent, limits = c(0, 0.04)))
return(tab)
}
P<-Portefeuille(data3,Matrendement,Matrendement[,6],Rf)
return(s)
#Fonction qui calcul différents type de portefeuille et le frontiere d efficience
Portefeuille <- function(BDD,Mat,benchmark,rf){
PEquiP <- PortefeuilleEqui(BDD,Mat,benchmark,rf)
PortefeuilleAlea(Mat)
EfficientFrontier(Mat)
# Portefeuille de variance minimum
assetSymbols <- c(str_c(1:ncol(Mat)))
assetReturns <- data.frame(Mat)
mu <- colMeans(assetReturns) # rendements espÃ©rÃ©s
cov.mat <- cov(assetReturns) # matrices de covariances
PortefeuilleMinV <-  PortefeuilleVarMin(mu,cov.mat,assetSymbols)
#Plot rendement et volatilité
liste<-rbind(BDD[,c(3,5)],PEquiP,fill=T)
liste<-drop_na(liste)
tab <- liste[, .(er = round(mean(ret), 4),
sd = round(sd(ret), 4)),
by = "ticker"]
s<-as.data.table(cbind("PortefeuilleVarMin",PortefeuilleMinV[2],PortefeuilleMinV[3]))
names(s)=c("ticker","er","sd")
# tab <- data.table(rbind(tab,s))
print(ggplot(tab, aes(x = sd, y = er, color = ticker)) +
geom_point(size = 5) +
# Miscellaneous Formatting
theme_bw() + ggtitle("Risk-Return Tradeoff") +
xlab("Volatility") + ylab("Expected Returns") +
scale_y_continuous(label = percent, limits = c(0, 0.001)) +
scale_x_continuous(label = percent, limits = c(0, 0.04)))
return(s)
}
P<-Portefeuille(data3,Matrendement,Matrendement[,6],Rf)
str(P)
#Fonction qui calcul différents type de portefeuille et le frontiere d efficience
Portefeuille <- function(BDD,Mat,benchmark,rf){
PEquiP <- PortefeuilleEqui(BDD,Mat,benchmark,rf)
PortefeuilleAlea(Mat)
EfficientFrontier(Mat)
# Portefeuille de variance minimum
assetSymbols <- c(str_c(1:ncol(Mat)))
assetReturns <- data.frame(Mat)
mu <- colMeans(assetReturns) # rendements espÃ©rÃ©s
cov.mat <- cov(assetReturns) # matrices de covariances
PortefeuilleMinV <-  PortefeuilleVarMin(mu,cov.mat,assetSymbols)
#Plot rendement et volatilité
s<-as.data.table(cbind("PortefeuilleVarMin",PortefeuilleMinV[2],PortefeuilleMinV[3]))
names(s)=c("ticker","er","sd")
liste<-rbind(BDD[,c(3,5)],PEquiP,s,fill=T)
liste<-drop_na(liste)
tab <- liste[, .(er = round(mean(ret), 4),
sd = round(sd(ret), 4)),
by = "ticker"]
# tab <- data.table(rbind(tab,s))
print(ggplot(tab, aes(x = sd, y = er, color = ticker)) +
geom_point(size = 5) +
# Miscellaneous Formatting
theme_bw() + ggtitle("Risk-Return Tradeoff") +
xlab("Volatility") + ylab("Expected Returns") +
scale_y_continuous(label = percent, limits = c(0, 0.001)) +
scale_x_continuous(label = percent, limits = c(0, 0.04)))
return(s)
}
P<-Portefeuille(data3,Matrendement,Matrendement[,6],Rf)
str(P)
library(readxl)
setwd("D:/M1 EKAP/Semestre 2/Gretl")
library(readxl)
setwd("D:/M1 EKAP/Semestre 2/Gretl")
Coffee <- data.table(read.csv("Coffee.csv"),ticker="Coffee")
Oil <- data.table(read.csv("Oil.csv"),ticker="Oil")
SP500 <- data.table(read.csv("SP500.csv"),ticker="SP500")
View(Oil)
View(SP500)
View(Coffee)
library(dplyr)
library(tidyr)
drop_na(Coffee)
View(Oil)
Coffee <- Coffee[,6]
View(Coffee)
Coffee <- data.table(read.csv("Coffee.csv"),ticker="Coffee")[,6]
Oil <- data.table(read.csv("Oil.csv"),ticker="Oil")[,6]
SP500 <- data.table(read.csv("SP500.csv"),ticker="SP500")[,6]
View(Oil)
Coffee <- as.numeric(data.table(read.csv("Coffee.csv"),ticker="Coffee")[,6])
Coffee <- data.table(read.csv("Coffee.csv"),ticker="Coffee")[,c(1,6)]
Oil <- data.table(read.csv("Oil.csv"),ticker="Oil")[,c(1,6)]
SP500 <- data.table(read.csv("SP500.csv"),ticker="SP500")[,c(1,6)]
View(SP500)
Coffee[,1] <- as.Date(Coffee[,1])
View(Coffee)
Coffee[,1] <- as.Date(Coffee$Date)
Oil[,1] <- as.Date(Oil$Date)
SP500[,1] <- as.Date(SP500$Date)
Coffee[,2] <- as.numeric(Coffee$Adj.Close)
Coffee[,2] <- as.numeric(Coffee$Adj.Close)
Oil[,2] <- as.numeric(Oil$Adj.Close)
SP500[,2] <- as.numeric(SP500$Adj.Close)
drop_na(Coffee)
Coffee <- drop_na(Coffee)
Oil <- drop_na(Oil)
dt <- merge(Coffee,Oil, by=Date)
View(Oil)
dt <- merge(Coffee,Oil, by="Date")
View(dt)
dt <- merge(dt,SP500,by="Date")
View(dt)
View(dt)
export(dt,"data",format("csv"),keep.row.names=TRUE)
library(car)
export(dt,"data",format("csv"),keep.row.names=TRUE)
export(dt,"data",format="csv"),keep.row.names=TRUE)
export(dt,"data",format="csv",keep.row.names=TRUE)
write.csv(dt,"data")
names(dt)=c("Date","Coffee","Oil","SP500")
View(dt)
write.csv(dt,"data")
write.csv(dt,"data.csv")
View(dt)
library(pls)
library(chemometrics)
library(corrplot)
# session / set working directory
setwd("D:/M1 EKAP/Semestre 2/DataMining/supports pour le TD")
load("WINES_GCMS_FTIR.Rdata")
source("VIP.R")
#------------------------------------------------------
# label des échantillons
origin=factor(Id[,3],labels=c("ARG","AUS","CHI","SOU"))
View(qparam)
# --------------------------------------------------------------------------
# spécification des données pour le modéle considéré
y=qparam[,2]
aroma.Etha <- data.frame(X=aroma,y=qparam[,1])
n=nrow(aroma.Etha)
p=ncol(aroma.Etha)-1
# --------------------------------------------------------------------------
# spécification des données pour le modéle considéré
y=qparam[,2]
aroma.TotalAci <- data.frame(X=aroma,y=qparam[,1])
n=nrow(aroma.TotalAci)
p=ncol(aroma.TotalAci)-1
aroma.TotalAci <- data.frame(X=aroma,y=qparam[,2])
n=nrow(aroma.TotalAci)
p=ncol(aroma.TotalAci)-1
plsLOO=plsr(y~.,data=aroma.TotalAci,scale=TRUE,ncomp=30,validation="LOO")
validationplot(plsLOO,estimate=c("train","CV"))
rmsepLOO=RMSEP(plsLOO,estimate=c("train","CV"))
TABRMSEP=NULL
for (essai in 1:100) {
plskfcvr=plsr(y~.,data=aroma.TotalAci,scale=TRUE,ncomp=30,validation="CV",
segments=5,segment.type='random')
rmsepplsr=RMSEP(plskfcvr,estimate=c("train","CV"))
TABRMSEP=rbind(TABRMSEP,rmsepplsr$val[2,1,])
}
boxplot(TABRMSEP,ylab="RMSEP",las=2)
lines(rmsepLOO$val[2,1,],col=1,lwd=3)
apply(TABRMSEP,2,mean)
# session / set working directory
setwd("D:/M1 EKAP/Semestre 2/DataMining/supports pour le TD")
load("WINES_GCMS_FTIR.Rdata")
#------------------------------------------------------
# label des échantillons
Id
origin=factor(Id[,3],labels=c("ARG","AUS","CHI","SOU"))
#------------------------------------------------------
# aromatic compounds (COV)
# ACP (normée) des COV
# besoin du package "FactoMineR"
respcaCOV=PCA(data.frame(origin,aroma),quali.sup=1)
plot(respcaCOV,axes=c(1,2),choix="ind",habillage=1)
# matrice des corrélations
# besoin du package "corrplot"
corrplot::corrplot(cor(aroma),method="color",order="FPC",tl.pos="n")
#------------------------------------------------------
# quality parameters
# ACP (normée) des paramètres de qualité
respcaQP=PCA(data.frame(origin,qparam),quali.sup=1)
plot(respcaQP,axes=c(1,2),choix="ind",habillage=1)
# matrice des corrélations
corrplot::corrplot(cor(qparam),method="color",order="FPC")
#------------------------------------------------------
# spectres IR
# 2 plages ont été exclues :
#       1545-1710 cm-1 (entre col. 159 et 160)
#       2968-3620 cm-1 (entre col. 484 et 485)
plot(as.numeric(colnames(IR)),IR[1,],type="l", xlab="wavelength (cm-1)",ylab="abundance")
for (i in 2:nrow(IR))lines(as.numeric(colnames(IR)),IR[i,],col=i)
abline(v=1545); abline(v=1710)
abline(v=2968); abline(v=3620)
# Multiplicative Scatter Correction for IR
# fonction msc du package "pls"
IRmsc=msc(IR)
plot(as.numeric(colnames(IRmsc)),IRmsc[1,],type="l", xlab="wavelength (cm-1)",ylab="abundance")
for (i in 2:nrow(IRmsc)) lines(as.numeric(colnames(IRmsc)),IRmsc[i,],col=i)
abline(v=1545); abline(v=1710)
abline(v=2968); abline(v=3620)
library(ggplot2)
plot(respcaQP,axes=c(1,2),choix="ind",habillage=1)
# matrice des corrélations
corrplot::corrplot(cor(qparam),method="color",order="FPC")
#------------------------------------------------------
# spectres IR
# 2 plages ont été exclues :
#       1545-1710 cm-1 (entre col. 159 et 160)
#       2968-3620 cm-1 (entre col. 484 et 485)
plot(as.numeric(colnames(IR)),IR[1,],type="l", xlab="wavelength (cm-1)",ylab="abundance")
for (i in 2:nrow(IR))lines(as.numeric(colnames(IR)),IR[i,],col=i)
abline(v=1545); abline(v=1710)
abline(v=2968); abline(v=3620)
# Multiplicative Scatter Correction for IR
# fonction msc du package "pls"
IRmsc=msc(IR)
plot(as.numeric(colnames(IRmsc)),IRmsc[1,],type="l", xlab="wavelength (cm-1)",ylab="abundance")
for (i in 2:nrow(IRmsc)) lines(as.numeric(colnames(IRmsc)),IRmsc[i,],col=i)
abline(v=1545); abline(v=1710)
abline(v=2968); abline(v=3620)
# matrice des corrélations
#corrplot::corrplot(cor(IRmsc))   # trop long
# besoin du package "fields"
image.plot(1:ncol(IRmsc),1:ncol(IRmsc),cor(IRmsc),breaks=seq(-1,1,0.1),nlevel = 20)
abline(h=160,v=160,lwd=5)
abline(h=485,v=485,lwd=5)
source("VIP.R")
# matrice des corrélations
#corrplot::corrplot(cor(IRmsc))   # trop long
# besoin du package "fields"
image.plot(1:ncol(IRmsc),1:ncol(IRmsc),cor(IRmsc),breaks=seq(-1,1,0.1),nlevel = 20)
abline(h=160,v=160,lwd=5)
abline(h=485,v=485,lwd=5)
# --------------------------------------------------------------------------
# séparation des échantillons de vin en
# un jeu de calibration (train set)
# et un jeu de validation (test set)
# besoin du package "caret"
testset=createDataPartition(origin,p=0.3,times=1)$Resample1
ntest=length(testset)
n=nrow(aroma)
trainset=setdiff(1:n,testset)
ntrain=length(trainset)
# --------------------------------------------------------------------------
# spécification des données pour le modéle considéré
y=qparam[,1]
# --------------------------------------------------------------------------
# spécification des données pour le modéle considéré
y=qparam[,2]
aroma.Etha <- data.frame(X=aroma,y=qparam[,2])
n=nrow(aroma.Etha)
p=ncol(aroma.Etha)-1
# --------------------------------------------------------------------------
# modèle de régression sur comp. principales (PCR)
# utilisation des fonctions du package "pls"
help(pcr)
modelpcr<-pcr(y~.,data=aroma.Etha[trainset,],scale=TRUE,ncomp=min(ntrain-1,p))
help(predict.mvr)
ypredpcr=predict(modelpcr,newdata=aroma.Etha[testset,], type="response")
dim(ypredpcr)
help(RMSEP)
rmseppcr=RMSEP(modelpcr, estimate="all",newdata=aroma.Etha[testset,])
modelpcr<-pcr(y~.,data=aroma.Etha[trainset,],scale=TRUE,ncomp=min(ntrain-1,p))
trainset=setdiff(1:n,testset)
# --------------------------------------------------------------------------
# séparation des échantillons de vin en
# un jeu de calibration (train set)
# et un jeu de validation (test set)
# besoin du package "caret"
testset=createDataPartition(origin,p=0.3,times=1)$Resample1
# --------------------------------------------------------------------------
# séparation des échantillons de vin en
# un jeu de calibration (train set)
# et un jeu de validation (test set)
# besoin du package "caret"
library(caret)
testset=createDataPartition(origin,p=0.3,times=1)$Resample1
ntest=length(testset)
n=nrow(aroma)
trainset=setdiff(1:n,testset)
ntrain=length(trainset)
# --------------------------------------------------------------------------
# spécification des données pour le modéle considéré
y=qparam[,2]
aroma.Etha <- data.frame(X=aroma,y=qparam[,2])
n=nrow(aroma.Etha)
p=ncol(aroma.Etha)-1
# --------------------------------------------------------------------------
# modèle de régression sur comp. principales (PCR)
# utilisation des fonctions du package "pls"
help(pcr)
modelpcr<-pcr(y~.,data=aroma.Etha[trainset,],scale=TRUE,ncomp=min(ntrain-1,p))
help(predict.mvr)
ypredpcr=predict(modelpcr,newdata=aroma.Etha[testset,], type="response")
dim(ypredpcr)
help(RMSEP)
rmseppcr=RMSEP(modelpcr, estimate="all",newdata=aroma.Etha[testset,])
rmseppcr
plot(rmseppcr, main="PCR model",ylab="RMSEP")
legend("right",legend=c("calib","valid"),col=1:2,lty=1:2)
